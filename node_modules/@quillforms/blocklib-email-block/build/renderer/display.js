"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _element = require("@wordpress/element");
var _rendererCore = require("@quillforms/renderer-core");
var _data = require("@wordpress/data");
var _react = require("react");
var _tinycolor = _interopRequireDefault(require("tinycolor2"));
var _emotion = require("emotion");
var _classnames = _interopRequireDefault(require("classnames"));
var EmailValidator = _interopRequireWildcard(require("email-validator"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/**
 * QuillForms Dependencies
 */

/**
 * WordPress Dependencies
 */

/**
 * External Dependencies
 */

const EmailOutput = props => {
  const {
    id,
    attributes,
    setIsValid,
    setIsAnswered,
    setValidationErr,
    showNextBtn,
    val,
    setVal,
    showErrMsg,
    next,
    inputRef,
    isTouchScreen,
    setFooterDisplay,
    isPreview,
    isReviewing
  } = props;
  const theme = (0, _rendererCore.useBlockTheme)(attributes.themeId);
  const messages = (0, _rendererCore.useMessages)();
  const answersColor = (0, _tinycolor.default)(theme.answersColor);
  const {
    required,
    placeholder
  } = attributes;
  const checkFieldValidation = value => {
    if (required === true && (!value || value === '' || value.length === 0)) {
      setIsValid(false);
      setValidationErr(messages['label.errorAlert.required']);
    } else if (value && !EmailValidator.validate(value) && value.length > 0) {
      setIsValid(false);
      setValidationErr(messages['label.errorAlert.email']);
    } else {
      setIsValid(true);
      setValidationErr(null);
    }
  };
  (0, _react.useEffect)(() => {
    if (isPreview || !isReviewing) checkFieldValidation(val);
  }, [required]);
  const changeHandler = e => {
    const value = e.target.value;
    checkFieldValidation(value);
    setVal(value);
    showErrMsg(false);
    if (!value) {
      setIsAnswered(false);
    } else {
      setIsAnswered(true);
      showNextBtn(true);
    }
  };
  return (0, _element.createElement)("input", {
    ref: inputRef,
    className: (0, _classnames.default)((0, _emotion.css)`
					& {
						width: 100%;
						border: none !important;
						outline: none;
						padding-bottom: 8px !important;
						padding-left: 0 !important;
						padding-right: 0 !important;
						border-radius: 0 !important;
						background: transparent;
						background-color: transparent !important;
						transition: box-shadow 0.1s ease-out 0s;
						box-shadow: ${answersColor.setAlpha(0.3).toString()}
							0px 1px !important;
					}

					&::placeholder {
						opacity: 0.3;
						/* Chrome, Firefox, Opera, Safari 10.1+ */
						color: ${theme.answersColor};
					}

					&:-ms-input-placeholder {
						opacity: 0.3;
						/* Internet Explorer 10-11 */
						color: ${theme.answersColor};
					}

					&::-ms-input-placeholder {
						opacity: 0.3;
						/* Microsoft Edge */
						color: ${theme.answersColor};
					}

					&:focus {
						box-shadow: ${answersColor.setAlpha(1).toString()}
							0px 2px !important;
						border: none !important;
						outline: none !important;
					}

					color: ${theme.answersColor} !important;
				`),
    id: 'email-' + id,
    type: "email",
    placeholder: placeholder === false ? messages['block.email.placeholder'] : placeholder,
    onChange: changeHandler,
    value: val && val.length > 0 ? val : '',
    onFocus: () => {
      if (isTouchScreen) {
        setFooterDisplay(false);
      }
    },
    onBlur: () => {
      if (isTouchScreen) {
        setFooterDisplay(true);
      }
    },
    autoComplete: "off"
  });
};
var _default = EmailOutput;
exports.default = _default;
//# sourceMappingURL=display.js.map