"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _element = require("@wordpress/element");
var _rendererCore = require("@quillforms/renderer-core");
var _utils = require("@quillforms/utils");
var _react = require("react");
var _classnames = _interopRequireDefault(require("classnames"));
var _tinycolor = _interopRequireDefault(require("tinycolor2"));
var styles = _interopRequireWildcard(require("./styles"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/**
 * QuillForms Dependencies
 */

/**
 * WordPress Dependencies
 */

/**
 * External Dependencies
 */

let selectionTimer;
const ChoiceItem = _ref => {
  let {
    choice,
    blockId,
    choiceIndex,
    val,
    clickHandler,
    showDropdown,
    clicked,
    hovered
  } = _ref;
  const [isBeingSelected, setIsBeingSelected] = (0, _react.useState)(false);
  const item = (0, _react.useRef)();
  const cx = (0, _utils.useCx)();
  (0, _react.useEffect)(() => {
    if (!showDropdown) setIsBeingSelected(false);
  }, [showDropdown]);
  const theme = (0, _rendererCore.useTheme)();
  const answersColor = (0, _tinycolor.default)(theme.answersColor);
  const isSelected = val && val === choice.value;
  (0, _react.useEffect)(() => {
    if (clicked) item.current.click();
    return () => {
      clicked = false;
    };
  }, [clicked]);
  return (0, _element.createElement)("div", {
    ref: item,
    id: `block-${blockId}-option-${choiceIndex}`,
    className: cx('dropdown__choiceWrapper', {
      selected: isSelected,
      isBeingSelected
    }, (0, _utils.css)`
						background: ${hovered ? answersColor.setAlpha(0.2).toString() : answersColor.setAlpha(0.1).toString()};

						border-color: ${theme.answersColor};
						color: ${theme.answersColor};

						&:hover {
							background: ${answersColor.setAlpha(0.2).toString()};
						}

						&.selected {
							background: ${(0, _tinycolor.default)(theme.answersColor).setAlpha(0.75).toString()};
							color: ${(0, _tinycolor.default)(theme.answersColor).isDark() ? '#fff' : '#333'}
					`, styles.DropdownChoiceWrapper),
    role: "presentation",
    onClick: () => {
      if (isSelected) {
        clearTimeout(selectionTimer);
      }
      if (!isSelected) setIsBeingSelected(true);
      clickHandler();
      selectionTimer = setTimeout(() => {
        if (isBeingSelected) setIsBeingSelected(false);
      }, 400);
    }
  }, choice.label);
};
var _default = ChoiceItem;
exports.default = _default;
//# sourceMappingURL=choice-item.js.map