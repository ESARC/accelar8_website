"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setSwiper = exports.setSubmissionErr = exports.setPaymentData = exports.setIsSubmitting = exports.setIsReviewing = exports.setIsFocused = exports.setIsFieldValid = exports.setIsFieldPending = exports.setIsFieldAnswered = exports.setIsCurrentBlockSafeToSwipe = exports.setFooterDisplay = exports.setFieldValidationErr = exports.setFieldPendingMsg = exports.setFieldAnswer = exports.resetAnswers = exports.insertEmptyFieldAnswer = exports.goToBlock = exports.goPrev = exports.goNext = exports.completeForm = void 0;
var _constants = require("./constants");
/**
 
 * Returns an action object used in setting swiper state
 *
 * @param {SwiperState} swiperState New swiper state.
 *
 * @return {SwiperActionTypes} Action object.
 */
const setSwiper = swiperState => {
  return {
    type: _constants.SET_SWIPER_STATE,
    swiperState
  };
};

/**
 * Go to next block
 *
 * @param {boolean} isSwiping Is swiping
 *
 * @return {SwiperActionTypes} Action object.
 */
exports.setSwiper = setSwiper;
const goNext = function () {
  let isSwiping = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  return {
    type: _constants.GO_NEXT,
    isSwiping
  };
};

/**
 * Go to previous block
 *
 * @return {SwiperActionTypes} Action object.
 */
exports.goNext = goNext;
const goPrev = () => {
  return {
    type: _constants.GO_PREV
  };
};

/**
 * Go to a specific field
 *
 * @param {string} id               The field id.
 *
 * @param          forceUpdateState
 * @return {SwiperActionTypes} Action object.
 */
exports.goPrev = goPrev;
const goToBlock = function (id) {
  let forceUpdateState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  return {
    type: _constants.GO_TO_BLOCK,
    id,
    forceUpdateState
  };
};

/**
 * Complete form and show thank you screen
 *
 * @return {SwiperActionTypes} Action object
 */
exports.goToBlock = goToBlock;
const completeForm = () => {
  return {
    type: _constants.COMPLETE_FORM
  };
};

/**
 * Reset answers
 *
 * @return {RendererAnswersActionTypes} Action object.
 */
exports.completeForm = completeForm;
const resetAnswers = () => {
  return {
    type: _constants.RESET_ANSWERS
  };
};
/**
 * Returns an action object used in inserting empty field answer.
 *
 * @param {string} id        Field uuid.
 * @param {string} type      Field type
 *
 * @param          blockName
 * @return {RendererAnswersActionTypes} Action object.
 */
exports.resetAnswers = resetAnswers;
const insertEmptyFieldAnswer = (id, blockName) => {
  return {
    type: _constants.INSERT_EMPTY_FIELD_ANSWER,
    id,
    blockName
  };
};

/**
 * Returns an action object used in setting field answer.
 *
 * @param {string}  id  Field uuid.
 * @param {unknown} val Field value could be string, array, number or any type.
 *
 * @return {Object} Action object.
 */
exports.insertEmptyFieldAnswer = insertEmptyFieldAnswer;
const setFieldAnswer = (id, val) => {
  return {
    type: _constants.SET_FIELD_ANSWER,
    id,
    val
  };
};

/**
 * Returns an action object used in setting field valid flag.
 *
 * @param {string}  id  Field uuid.
 * @param {boolean} val Field isValid flag.
 *
 * @return {Object} Action object.
 */
exports.setFieldAnswer = setFieldAnswer;
const setIsFieldValid = (id, val) => {
  return {
    type: _constants.SET_IS_FIELD_VALID,
    id,
    val
  };
};

/**
 * Returns an action object used in setting fields answered flag.
 *
 * @param {string}  id  Field uuid.
 * @param {boolean} val Field isAnswered flag.
 *
 * @return {RendererAnswersActionTypes} Action object.
 */
exports.setIsFieldValid = setIsFieldValid;
const setIsFieldAnswered = (id, val) => {
  return {
    type: _constants.SET_IS_FIELD_ANSWERED,
    id,
    val
  };
};

/**
 * Returns an action object used in setting fields pending flag.
 *
 * @param {string}  id  Field uuid.
 * @param {boolean} val Field isPending flag.
 *
 * @return {RendererAnswersActionTypes} Action object.
 */
exports.setIsFieldAnswered = setIsFieldAnswered;
const setIsFieldPending = (id, val) => {
  return {
    type: _constants.SET_IS_FIELD_PENDING,
    id,
    val
  };
};

/**
 * Returns and object used in setting pending message key
 *
 * @param {string} id  Field uuid.
 * @param {string} val Field pendingMsg flag.
 *
 * @return {Object} Action object.
 */
exports.setIsFieldPending = setIsFieldPending;
const setFieldPendingMsg = (id, val) => {
  return {
    type: _constants.SET_FIELD_PENDING_MSG,
    id,
    val
  };
};

/**
 * Returns and object used in setting error message key
 *
 * @param {string} id  Field uuid.
 * @param {string} val Field isAnswered flag.
 *
 * @return {Object} Action object.
 */
exports.setFieldPendingMsg = setFieldPendingMsg;
const setFieldValidationErr = (id, val) => {
  return {
    type: _constants.SET_FIELD_VALIDATION_ERR,
    id,
    val
  };
};

/**
 * Set is reviewing flag
 *
 * @param {boolean} val The new flag value.
 *
 * @return {Object} Action object
 */
exports.setFieldValidationErr = setFieldValidationErr;
const setIsReviewing = val => {
  return {
    type: _constants.SET_IS_REVIEWING,
    val
  };
};

/**
 * Set is submitting flag.
 *
 * @param {boolean} val The new flag value.
 *
 * @return {Object} Action object
 */
exports.setIsReviewing = setIsReviewing;
const setIsSubmitting = val => {
  return {
    type: _constants.SET_IS_SUBMITTING,
    val
  };
};

/**
 * Set submission errors.
 *
 * @param {string} val The new submission errors.
 *
 * @return {Object} Action object
 */
exports.setIsSubmitting = setIsSubmitting;
const setSubmissionErr = val => {
  return {
    type: _constants.SET_SUBMISSION_ERR,
    val
  };
};

/**
 * Set payment data
 *
 * @param  data
 * @return {SwiperActionTypes} Action object
 */
exports.setSubmissionErr = setSubmissionErr;
const setPaymentData = data => {
  return {
    type: _constants.SET_PAYMENT_DATA,
    data
  };
};

/**
 * Set isFocused flag
 *
 * @param {boolean} val The new flag value.
 *
 * @return {Object} Action object
 */
exports.setPaymentData = setPaymentData;
const setIsFocused = val => {
  return {
    type: _constants.SET_IS_FOCUSED,
    val
  };
};

/**
 * Set footerDisplay flag
 * This flag will alomst be needed to control in touch screens.
 *
 * @param {boolean} val The new flag value.
 *
 * @return {Object} Action object
 */
exports.setIsFocused = setIsFocused;
const setFooterDisplay = val => {
  return {
    type: _constants.SET_FOOTER_DISPLAY,
    val
  };
};

/**
 * Set isCurrentBlockSafeToSwipe flag
 * This flag should control going to the next block.
 *
 * @param {boolean} val The new flag value.
 *
 * @return {Object} Action object
 */
exports.setFooterDisplay = setFooterDisplay;
const setIsCurrentBlockSafeToSwipe = val => {
  return {
    type: _constants.SET_IS_CURRENT_BLOCK_SAFE_TO_SWIPE,
    val
  };
};
exports.setIsCurrentBlockSafeToSwipe = setIsCurrentBlockSafeToSwipe;
//# sourceMappingURL=actions.js.map