"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _element = require("@wordpress/element");
var _data = require("@wordpress/data");
var _classnames = _interopRequireDefault(require("classnames"));
var _emotion = require("emotion");
var _hooks = require("../../hooks");
var _downIcon = _interopRequireDefault(require("./down-icon"));
var _upIcon = _interopRequireDefault(require("./up-icon"));
/**
 * WordPress Dependencies
 */

/**
 * External Dependencies
 */

/**
 * Internal Dependencies
 */

const FieldNavigation = _ref => {
  let {
    shouldFooterBeDisplayed
  } = _ref;
  const {
    goNext,
    goPrev,
    setIsCurrentBlockSafeToSwipe,
    setIsFieldValid,
    setIsFieldPending,
    setFieldValidationErr,
    goToBlock
  } = (0, _data.useDispatch)('quillForms/renderer-core');
  const {
    beforeGoingNext
  } = (0, _hooks.useFormContext)();
  const theme = (0, _hooks.useCurrentTheme)();
  const settings = (0, _hooks.useFormSettings)();
  const {
    currentBlockId,
    walkPath,
    blockTypes
  } = (0, _data.useSelect)(select => {
    return {
      currentBlockId: select('quillForms/renderer-core').getCurrentBlockId(),
      walkPath: select('quillForms/renderer-core').getWalkPath(),
      blockTypes: select('quillForms/blocks').getBlockTypes()
    };
  });
  if (!currentBlockId) return null;
  const currentBlockIndex = walkPath.findIndex(block => block.id === currentBlockId);
  const currentBlockName = walkPath[currentBlockIndex]?.name;
  const currentBlockType = blockTypes?.[currentBlockName];
  const {
    isCurrentBlockValid,
    answers
  } = (0, _data.useSelect)(select => {
    return {
      answers: select('quillForms/renderer-core').getAnswers(),
      isCurrentBlockValid: currentBlockType?.supports?.innerBlocks ? select('quillForms/renderer-core')?.hasValidFields(currentBlockId) : currentBlockType?.supports?.editable ? select('quillForms/renderer-core')?.isValidField(currentBlockId) : true
    };
  });
  const goNextReally = async () => {
    if (answers[currentBlockIndex]?.isPending) return;
    if (beforeGoingNext && currentBlockId) {
      await beforeGoingNext({
        answers,
        currentBlockId,
        setIsFieldValid,
        setFieldValidationErr,
        setIsCurrentBlockSafeToSwipe,
        goToBlock,
        goNext,
        setIsPending: val => setIsFieldPending(currentBlockId, val)
      });
    } else {
      goNext();
    }
  };
  return (0, _element.createElement)("div", {
    className: (0, _classnames.default)('renderer-core-field-navigation', {
      hidden: !shouldFooterBeDisplayed
    })
  }, (0, _element.createElement)("div", {
    className: (0, _classnames.default)('renderer-core-field-navigation__up-icon', {
      rotate: settings?.animationDirection === 'horizontal'
    }, (0, _emotion.css)`
						background: ${theme.buttonsBgColor};
					`),
    onClick: () => {
      goPrev();
    }
  }, (0, _element.createElement)(_upIcon.default, null)), (0, _element.createElement)("div", {
    className: (0, _classnames.default)('renderer-core-field-navigation__down-icon', {
      rotate: settings?.animationDirection === 'horizontal'
    }, (0, _emotion.css)`
						background: ${theme.buttonsBgColor};
					`),
    onClick: () => {
      if (walkPath[walkPath.length - 1].id !== currentBlockId) {
        if (isCurrentBlockValid) {
          goNextReally();
        } else {
          setIsCurrentBlockSafeToSwipe(false);
        }
      }
    }
  }, (0, _element.createElement)(_downIcon.default, null)));
};
var _default = FieldNavigation;
exports.default = _default;
//# sourceMappingURL=index.js.map