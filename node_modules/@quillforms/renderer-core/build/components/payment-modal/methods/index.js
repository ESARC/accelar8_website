"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _element = require("@wordpress/element");
var _paymentGateways = require("@quillforms/payment-gateways");
var _radioControl = _interopRequireDefault(require("./radio-control"));
var _data = require("@wordpress/data");
var _useGeneralTheme = _interopRequireDefault(require("../../../hooks/use-general-theme"));
var _emotion = require("emotion");
var _lodash = require("lodash");
/**
 * QuillForms Dependencies
 */

/**
 * WordPress Dependencies
 */

/**
 * External Dependencies
 */

const Methods = _ref => {
  var _urlParams$get, _data$payments$labels;
  let {
    data
  } = _ref;
  const {
    setPaymentData,
    completeForm
  } = (0, _data.useDispatch)('quillForms/renderer-core');
  const generalTheme = (0, _useGeneralTheme.default)();
  const gateways = (0, _paymentGateways.getPaymentGatewayModules)();
  const methodsKeys = Object.keys(data.payments.methods);
  const options = methodsKeys.map(key => {
    const [gateway, method] = key.split(':');
    return {
      label: gateways[gateway].methods[method].customer.label.text,
      value: key
    };
  });
  const urlParams = new URLSearchParams(window.location.search);
  let defaultMethod = methodsKeys[0];
  if (urlParams.get('step') === 'payment' && methodsKeys.includes((_urlParams$get = urlParams.get('method')) !== null && _urlParams$get !== void 0 ? _urlParams$get : '')) {
    var _urlParams$get2;
    defaultMethod = (_urlParams$get2 = urlParams.get('method')) !== null && _urlParams$get2 !== void 0 ? _urlParams$get2 : '';
  }
  const [selected, setSelected] = (0, _element.useState)(defaultMethod);
  const [gateway, method] = selected.split(':');
  const CustomerRender = gateways[gateway].methods[method].customer.render;
  return (0, _element.createElement)("div", {
    className: "renderer-core-payment-modal-methods"
  }, (0, _element.createElement)(_element.Fragment, null, (0, _lodash.size)(methodsKeys) > 1 && (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)("p", {
    className: (0, _emotion.css)`
								color: ${generalTheme.questionsColor};
								font-size: 20px;
							`
  }, (_data$payments$labels = data.payments.labels?.select_payment_method) !== null && _data$payments$labels !== void 0 ? _data$payments$labels : 'Select a payment method'), (0, _element.createElement)("div", {
    className: "renderer-components-radio-control__options-group"
  }, (0, _element.createElement)(_radioControl.default, {
    id: "payment-methods",
    selected: selected,
    options: options,
    onChange: setSelected
  })))), (0, _element.createElement)(CustomerRender, {
    slug: selected,
    data: data,
    onComplete: () => {
      completeForm();
      setPaymentData(null);
    }
  }));
};
var _default = Methods;
exports.default = _default;
//# sourceMappingURL=index.js.map