"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _element = require("@wordpress/element");
var _data = require("@wordpress/data");
var _hooks = require("@wordpress/hooks");
var _emotion = require("emotion");
var _fieldRender = require("../field-render");
var _useBlockTypes = _interopRequireDefault(require("../../hooks/use-block-types"));
var _fieldFooter = _interopRequireDefault(require("../field-footer"));
var _useFormContext = _interopRequireDefault(require("../../hooks/use-form-context"));
var _useHandleFocus = _interopRequireDefault(require("../../hooks/use-handle-focus"));
var _useBlockTheme = _interopRequireDefault(require("../../hooks/use-block-theme"));
/* eslint-disable no-nested-ternary */
/**
 * WordPress Dependencies
 */

/**
 * External Dependencies
 */

/**
 * Internal Dependencies
 */

let timer1, timer2;
const FieldDisplayWrapper = _ref => {
  let {
    isShaking,
    setIsShaking
  } = _ref;
  const inputRef = (0, _element.useRef)(null);
  const {
    id,
    next,
    blockName,
    isActive,
    attributes,
    showNextBtn,
    showErrMsg,
    innerBlocks
  } = (0, _fieldRender.__experimentalUseFieldRenderContext)();
  const theme = (0, _useBlockTheme.default)(attributes?.themeId);
  const isTouchScreen = typeof window !== 'undefined' && 'ontouchstart' in window || typeof navigator !== 'undefined' && navigator.maxTouchPoints > 0 ||
  // @ts-expect-error
  typeof navigator !== 'undefined' && navigator.msMaxTouchPoints > 0;
  (0, _useHandleFocus.default)(inputRef, isActive, isTouchScreen);
  const {
    isPreview,
    formId
  } = (0, _useFormContext.default)();
  if (!blockName || !id) return null;
  const blockTypes = (0, _useBlockTypes.default)();
  const blockType = blockTypes[blockName];
  const [shakingErr, setShakingErr] = (0, _element.useState)(null);
  const {
    isCurrentBlockEditable,
    isReviewing
  } = (0, _data.useSelect)(select => {
    return {
      isCurrentBlockEditable: select('quillForms/blocks').hasBlockSupport(blockName, 'editable'),
      isReviewing: select('quillForms/renderer-core').isReviewing()
    };
  });
  const {
    answerValue,
    isAnswered,
    isValid,
    isPending
  } = (0, _data.useSelect)(select => {
    return {
      answerValue: isCurrentBlockEditable ? select('quillForms/renderer-core').getFieldAnswerVal(id) : null,
      isAnswered: isCurrentBlockEditable ? select('quillForms/renderer-core').isAnsweredField(id) : null,
      isValid: isCurrentBlockEditable ? select('quillForms/renderer-core').isValidField(id) : null,
      isPending: select('quillForms/renderer-core').isFieldPending(id)
    };
  });
  const clearTimers = () => {
    clearTimeout(timer1);
    clearTimeout(timer2);
  };
  (0, _element.useEffect)(() => {
    clearTimers();
    setIsShaking(false);
    if (shakingErr) setShakingErr(null);
  }, [answerValue]);
  (0, _element.useEffect)(() => {
    if (!isActive) {
      clearTimers();
      setIsShaking(false);
      if (shakingErr) setShakingErr(null);
    }
    if (isActive) {
      setFooterDisplay(true);
    }
  }, [isActive]);
  const shakeWithError = err => {
    clearTimers();
    if (!isShaking) setIsShaking(true);
    if (!shakingErr) setShakingErr(err);
    timer1 = setTimeout(() => {
      setIsShaking(false);
    }, 600);
    timer2 = setTimeout(() => {
      setShakingErr(null);
    }, 1200);
  };
  (0, _element.useEffect)(() => {
    if (isAnswered) {
      const action = isActive ? 'QuillForms.RendererCore.FieldAnsweredActive' : 'QuillForms.RendererCore.FieldAnswered';
      (0, _hooks.doAction)(action, {
        formId,
        id,
        label: attributes?.label
      });
    }
  }, [isAnswered, isActive]);
  (0, _element.useEffect)(() => {
    if (isActive) {
      (0, _hooks.doAction)('QuillForms.RendererCore.FieldActive', {
        formId,
        id,
        label: attributes?.label
      });
    }
  }, [isActive]);
  const {
    setIsFieldValid,
    setFieldValidationErr,
    setIsFieldAnswered,
    setIsFieldPending,
    setFieldPendingMsg,
    setFieldAnswer,
    setFooterDisplay
  } = (0, _data.useDispatch)('quillForms/renderer-core');
  const props = {
    id,
    next,
    attributes,
    isValid,
    isPending,
    innerBlocks,
    isReviewing,
    val: answerValue,
    setIsValid: val => setIsFieldValid(id, val),
    setIsAnswered: val => setIsFieldAnswered(id, val),
    setIsPending: val => setIsFieldPending(id, val),
    setPendingMsg: val => setFieldPendingMsg(id, val),
    setValidationErr: val => setFieldValidationErr(id, val),
    setVal: val => setFieldAnswer(id, val),
    showNextBtn,
    blockWithError: err => shakeWithError(err),
    showErrMsg,
    isPreview,
    isTouchScreen,
    inputRef,
    setFooterDisplay,
    formId
  };
  return (0, _element.createElement)("div", {
    role: "presentation",
    className: "renderer-core-field-display-wrapper"
  }, blockType?.display && (0, _element.createElement)("div", {
    className: (0, _emotion.css)`
						@media ( max-width: 767px ) {
							margin-top: ${theme.typographyPreset === 'sm' ? `24px` : `32px`};
						}

						@media ( min-width: 768px ) {
							margin-top: ${theme.typographyPreset === 'sm' ? `24px` : theme.typographyPreset === 'lg' ? `40px` : `32px`};
						}
					`
  }, /* @ts-expect-error */
  (0, _element.createElement)(blockType.display, props)), (0, _element.createElement)(_fieldFooter.default, {
    shakingErr: shakingErr,
    isPending: isPending
  }));
};
var _default = FieldDisplayWrapper;
exports.default = _default;
//# sourceMappingURL=index.js.map