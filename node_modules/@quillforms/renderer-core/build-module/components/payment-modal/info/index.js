import { createElement } from "@wordpress/element";
/**
 * QuillForms Dependencies
 */
import { formatMoney } from '@quillforms/utils';
import useGeneralTheme from '../../../hooks/use-general-theme';

/**
 * External Dependencies
 */
import { css } from 'emotion';
import classnames from 'classnames';
import tinycolor from 'tinycolor2';
/**
 * Internal Dependencies
 */

const Info = _ref => {
  var _data$payments$labels, _data$payments$labels2;
  let {
    data
  } = _ref;
  const generalTheme = useGeneralTheme();
  const questionsColor = tinycolor(generalTheme.questionsColor);
  const cs = data.payments.currency.symbol;
  const csp = data.payments.currency.symbol_pos;
  return createElement("div", {
    className: "renderer-core-payment-modal-info"
  }, createElement("div", {
    className: classnames('renderer-core-payment-modal-info__heading', css`
						font-size: 22px;
						text-transform: uppercase;
						background: ${generalTheme.buttonsBgColor};
						padding: 15px;
						color: ${generalTheme.buttonsFontColor};
						border-top-right-radius: 8px;
						border-top-left-radius: 8px;
					`)
  }, (_data$payments$labels = data.payments.labels?.order_details_heading) !== null && _data$payments$labels !== void 0 ? _data$payments$labels : 'Your Order'), data.payments.products.items.map((item, index) => {
    return createElement("div", {
      key: index,
      className: classnames('renderer-core-payment-order__item-row', css`
								color: ${generalTheme.questionsColor};
								border-bottom: 1px solid;
								border-color: ${questionsColor.setAlpha(0.3).toString()};
							`)
    }, createElement("div", {
      className: "renderer-core-payment-order__item-name"
    }, item.name), createElement("div", {
      className: "renderer-core-payment-order__item-price"
    }, formatMoney(item.price, cs, csp), ' '));
  }), createElement("div", {
    className: classnames('renderer-core-payment-modal-info_footer', css`
						color: ${generalTheme.questionsColor};
						font-weight: bold;
					`)
  }, createElement("div", null, (_data$payments$labels2 = data.payments.labels?.order_total) !== null && _data$payments$labels2 !== void 0 ? _data$payments$labels2 : 'Total', " "), createElement("div", null, formatMoney(data.payments.products.total, cs, csp), ' ', data.payments.recurring && ` /${data.payments.recurring.interval_count} ${data.payments.recurring.interval_unit}/s`)));
};
export default Info;
//# sourceMappingURL=index.js.map