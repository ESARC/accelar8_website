import { createElement, Fragment } from "@wordpress/element";
/**
 * QuillForms Dependencies
 */
import { getPaymentGatewayModules } from '@quillforms/payment-gateways';

/**
 * WordPress Dependencies
 */
import RadioControl from './radio-control';
import { useState } from '@wordpress/element';
import { useDispatch } from '@wordpress/data';
import useGeneralTheme from '../../../hooks/use-general-theme';

/**
 * External Dependencies
 */
import { css } from 'emotion';
import { size } from 'lodash';
const Methods = _ref => {
  var _urlParams$get, _data$payments$labels;
  let {
    data
  } = _ref;
  const {
    setPaymentData,
    completeForm
  } = useDispatch('quillForms/renderer-core');
  const generalTheme = useGeneralTheme();
  const gateways = getPaymentGatewayModules();
  const methodsKeys = Object.keys(data.payments.methods);
  const options = methodsKeys.map(key => {
    const [gateway, method] = key.split(':');
    return {
      label: gateways[gateway].methods[method].customer.label.text,
      value: key
    };
  });
  const urlParams = new URLSearchParams(window.location.search);
  let defaultMethod = methodsKeys[0];
  if (urlParams.get('step') === 'payment' && methodsKeys.includes((_urlParams$get = urlParams.get('method')) !== null && _urlParams$get !== void 0 ? _urlParams$get : '')) {
    var _urlParams$get2;
    defaultMethod = (_urlParams$get2 = urlParams.get('method')) !== null && _urlParams$get2 !== void 0 ? _urlParams$get2 : '';
  }
  const [selected, setSelected] = useState(defaultMethod);
  const [gateway, method] = selected.split(':');
  const CustomerRender = gateways[gateway].methods[method].customer.render;
  return createElement("div", {
    className: "renderer-core-payment-modal-methods"
  }, createElement(Fragment, null, size(methodsKeys) > 1 && createElement(Fragment, null, createElement("p", {
    className: css`
								color: ${generalTheme.questionsColor};
								font-size: 20px;
							`
  }, (_data$payments$labels = data.payments.labels?.select_payment_method) !== null && _data$payments$labels !== void 0 ? _data$payments$labels : 'Select a payment method'), createElement("div", {
    className: "renderer-components-radio-control__options-group"
  }, createElement(RadioControl, {
    id: "payment-methods",
    selected: selected,
    options: options,
    onChange: setSelected
  })))), createElement(CustomerRender, {
    slug: selected,
    data: data,
    onComplete: () => {
      completeForm();
      setPaymentData(null);
    }
  }));
};
export default Methods;
//# sourceMappingURL=index.js.map