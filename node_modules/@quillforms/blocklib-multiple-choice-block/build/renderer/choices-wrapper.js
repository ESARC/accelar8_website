"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _element = require("@wordpress/element");
var _rendererCore = require("@quillforms/renderer-core");
var _utils = require("@quillforms/utils");
var _react = require("react");
var _classnames = _interopRequireDefault(require("classnames"));
var _lodash = require("lodash");
var _choiceItem = _interopRequireDefault(require("./choice-item"));
var styles = _interopRequireWildcard(require("./styles"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/**
 * QuillForms Dependencies
 */

/**
 * WordPress Dependencies
 */

/**
 * External Dependencies
 */

/**
 * Internal Dependencies
 */

const ChoicesWrapper = _ref => {
  let {
    id,
    attributes,
    val,
    isActive,
    setVal,
    setChoiceClicked,
    checkfieldValidation
  } = _ref;
  const {
    verticalAlign,
    multiple,
    choices,
    themeId,
    max,
    min
  } = attributes;
  const cx = (0, _utils.useCx)();
  const theme = (0, _rendererCore.useBlockTheme)(themeId);
  const charCode = 'a'.charCodeAt(0);
  // Simple algorithm to generate alphabatical idented order
  const identName = a => {
    const b = [a];
    let sp, out, i, div;
    sp = 0;
    while (sp < b.length) {
      if (b[sp] > 25) {
        div = Math.floor(b[sp] / 26);
        b[sp + 1] = div - 1;
        b[sp] %= 26;
      }
      sp += 1;
    }
    out = '';
    for (i = 0; i < b.length; i += 1) {
      out = String.fromCharCode(charCode + b[i]) + out;
    }
    return out;
  };
  const $verticalAlign = verticalAlign;
  const $choices = (0, _lodash.cloneDeep)(choices).map(($choice, index) => {
    if (!$choice.label) $choice.label = 'Choice ' + (index + 1);
    // if ( ! verticalAlign && $choice.label.length > 26 )
    // 	$verticalAlign = true;
    $choice.selected = val && val.length > 0 && val.includes($choice.value) ? true : false;
    $choice.order = identName(index);
    return $choice;
  });
  const clickHandler = (newValue, selected) => {
    let $val;
    if (val?.length > 0) {
      $val = (0, _lodash.cloneDeep)(val);
    } else {
      $val = [];
    }
    if (selected) {
      $val.splice($val.findIndex(item => item === newValue), 1);
      setVal($val);
    } else {
      if (multiple) {
        $val.push(newValue);
      } else {
        $val = [newValue];
      }
      setVal($val);
      setChoiceClicked(false);
      setTimeout(() => {
        setChoiceClicked(true);
      }, 0);
    }
    checkfieldValidation($val);
  };
  const handleClick = (0, _react.useCallback)((0, _lodash.debounce)(map => {
    const pressedLetter = Object.values(map).join('');
    console.log(pressedLetter);
    console.log($choices);
    const $choiceIndex = $choices.findIndex(choice => choice.order.toUpperCase() === pressedLetter.toUpperCase());
    console.log($choiceIndex);
    document.querySelector(`#block-${id} .multiplechoice__options .multipleChoice__optionWrapper:nth-child(${$choiceIndex + 1})`)?.click();
    mappedKeyboardTicks = {};
  }, 100), [$choices]);
  let mappedKeyboardTicks = {};
  const handleKeyDown = e => {
    mappedKeyboardTicks[e.code] = String.fromCharCode(e.keyCode);
    handleClick(mappedKeyboardTicks);
  };
  (0, _react.useEffect)(() => {
    document.getElementById(`block-${id}`)?.addEventListener('keydown', handleKeyDown);
  }, []);
  return (0, _element.createElement)("div", {
    className: "qf-multiple-choice-block"
  }, (0, _element.createElement)("div", {
    className: cx('multiplechoice__options', {
      valigned: $verticalAlign
    }, styles.MultipleChoiceOptions)
  }, $choices && $choices.length > 0 && $choices.map((choice, index) => {
    return (0, _element.createElement)(_choiceItem.default, {
      theme: theme,
      key: `block-multiple-choice-${id}-choice-${choice.value}`,
      choiceLabel: choice.label,
      choiceValue: choice.value,
      order: choice.order.toUpperCase(),
      selected: choice.selected,
      multiple: multiple,
      clickHandler: () => clickHandler(choice.value, choice.selected)
    });
  })));
};
var _default = ChoicesWrapper;
exports.default = _default;
//# sourceMappingURL=choices-wrapper.js.map