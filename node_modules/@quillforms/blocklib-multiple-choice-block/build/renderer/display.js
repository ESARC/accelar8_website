"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _element = require("@wordpress/element");
var _rendererCore = require("@quillforms/renderer-core");
var _react = require("react");
var _lodash = require("lodash");
var _choicesWrapper = _interopRequireDefault(require("./choices-wrapper"));
/**
 * QuillForms Depndencies
 */

/**
 * WordPress Dependencies
 */

/**
 * External Dependencies
 */

/**
 * Internal Dependencies
 */

let multipleChoiceTimer;
const MultipleChoiceOutput = props => {
  const {
    id,
    attributes,
    setIsValid,
    setIsAnswered,
    showNextBtn,
    setValidationErr,
    val,
    setVal,
    next,
    isActive,
    isAnimating,
    showErrMsg,
    isPreview,
    isReviewing
  } = props;
  const {
    multiple,
    required,
    min,
    max
  } = attributes;
  const messages = (0, _rendererCore.useMessages)();
  const [choiceClicked, setChoiceClicked] = (0, _react.useState)(null);
  const checkfieldValidation = $val => {
    if (required === true && (!$val || $val.length === 0)) {
      setIsValid(false);
      setValidationErr(messages['label.errorAlert.required']);
    } else {
      if (multiple && min && (0, _lodash.size)($val) < min) {
        setIsValid(false);
        setValidationErr(messages['label.errorAlert.minChoices']);
      } else if (multiple && max && (0, _lodash.size)($val) > max) {
        setIsValid(false);
        setValidationErr(messages['label.errorAlert.maxChoices']);
      } else {
        setIsValid(true);
        setValidationErr(null);
      }
    }
  };
  (0, _react.useEffect)(() => {
    return () => clearTimeout(multipleChoiceTimer);
  }, []);
  (0, _react.useEffect)(() => {
    if (!isActive) {
      clearTimeout(multipleChoiceTimer);
    }
    if (!isActive && !isAnimating) {
      setChoiceClicked(null);
    }
  }, [isActive, isAnimating]);
  (0, _react.useEffect)(() => {
    clearTimeout(multipleChoiceTimer);
    if (choiceClicked && val?.length > 0 && !multiple) {
      multipleChoiceTimer = setTimeout(() => {
        next();
      }, 600);
    }
  }, [choiceClicked]);
  (0, _react.useEffect)(() => {
    if (isPreview || !isReviewing) checkfieldValidation(val);
  }, [attributes]);
  (0, _react.useEffect)(() => {
    if (val?.length > 0) {
      setIsAnswered(true);
    } else {
      setIsAnswered(false);
    }
    if (multiple) {
      if (val?.length > 0) {
        showNextBtn(true);
      }
    }
  }, [val, attributes]);
  return (0, _element.createElement)("div", {
    className: "qf-multiple-choice-block-renderer"
  }, (0, _element.createElement)(_choicesWrapper.default, {
    attributes: attributes,
    id: id,
    val: val,
    isActive: isActive,
    checkfieldValidation: checkfieldValidation,
    setVal: setVal,
    setChoiceClicked: val => {
      showErrMsg(false);
      setChoiceClicked(val);
    }
  }));
};
var _default = MultipleChoiceOutput;
exports.default = _default;
//# sourceMappingURL=display.js.map